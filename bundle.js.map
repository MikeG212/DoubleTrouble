{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/app.js","webpack:///./app/board.js","webpack:///./app/game.js","webpack:///./app/tile.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,4CAAI;AACnB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,yBAAyB,qBAAqB;AAC9C,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;;;;;;;;;;;;;ACxFA,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACtLA,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sB;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/app.js\");\n","import Game from './game'\n\nconst CELL_W = 100;\nconst CELL_H = 100;\nconst CELL_ROWS = 4;\nconst CELL_COLS = 4;\nconst CELL_GAP = 2\n\nconst KEY_LEFT = 37;\nconst KEY_UP = 38;\nconst KEY_RIGHT = 39;\nconst KEY_DOWN = 40;\n\nlet game = new Game();\n// game.start();\nlet board = game.board;\nlet canvas, canvasContext;\n\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM CONTENT LOADED');\n    canvas = document.getElementById('doubleTroubleCanvas');\n    canvasContext = canvas.getContext('2d');\n    drawAll();\n    document.addEventListener('keydown', keyPressed)\n})\n\nfunction keyPressed(evt) {\n    // console.log(evt.keyCode);\n    // debugger;\n    switch (evt.keyCode) {\n        case KEY_LEFT:\n            game.turn('left');\n            break;\n        case KEY_RIGHT:\n            game.turn('right');\n            break;\n        case KEY_UP:\n            game.turn('up');\n            break;\n        case KEY_DOWN:\n            game.turn('down');\n            break;\n        default:\n            break;\n    }\n\n    drawAll();\n    evt.preventDefault();\n}\n\n\nfunction drawCells() {\n    for (let eachRow = 0; eachRow < CELL_ROWS; eachRow++) {\n        for (let eachCol = 0; eachCol < CELL_COLS; eachCol++) {\n            let tile = board.grid[eachRow][eachCol];\n            colorRect(CELL_W * eachRow + CELL_GAP,\n                      CELL_H * eachCol + CELL_GAP,\n                      CELL_W - CELL_GAP,\n                      CELL_H - CELL_GAP,\n                      tile.color,\n                      tile.val\n                    );\n        }\n    }    \n}\n\n\nfunction drawAll() {\n    // console.log(board.grid)\n    // debugger\n    drawCanvas();\n    drawCells();\n}\n\nfunction drawCanvas() {\n    colorRect(0, 0, canvas.width, canvas.height, 'black');\n}\n\nfunction colorRect(topLeftX, topLeftY, boxWidth, boxHeight, fillColor, val) {\n    \n    canvasContext.fillStyle = fillColor;\n    canvasContext.fillRect(topLeftX, topLeftY, boxWidth, boxHeight);\n    canvasContext.font = '40px serif';\n    canvasContext.fillStyle = \"black\";\n    if (val) {\n        canvasContext.fillText(`${val}`, topLeftX + 40, topLeftY + 60);\n    }\n}\n\n","const Tile = require(\"./tile\");\n\nclass Board {\n    constructor() {\n        this.grid = this.blankGrid();\n        this.gameOver = false;\n        this.createRandomTile(this.grid);\n        this.createRandomTile(this.grid);\n    }\n\n    blankGrid() {\n        let blankArr = new Array(4);\n        for (let i = 0; i < blankArr.length; i++) {\n            blankArr[i] = new Array(new Tile(null), new Tile(null), new Tile(null), new Tile(null));\n        }\n        return blankArr;\n    }\n\n    getAllEmptyPos() {\n        let allEmptyPos = []\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = 0; i < this.grid[j].length; i++) {\n                if (!this.grid[i][j].val) {\n                    allEmptyPos.push([i,j]);\n                }\n            }\n            \n        }\n        return allEmptyPos;\n    }\n\n    createRandomTile() {\n        let allEmptyPos = this.getAllEmptyPos();\n        if (allEmptyPos.length === 0) {\n            this.gameOver = true;\n            return null;\n        }\n        let randomIndex = Math.floor(Math.random() * allEmptyPos.length)\n        let pos = allEmptyPos[randomIndex];\n        \n        let val;\n        if (Math.random() < .5) {\n            val = 2;\n        } else {\n            val = 4;\n        }\n\n        let newTile = new Tile(val);\n        this.setPos(pos, newTile);\n    }\n\n    generateRandomPos() {\n        return [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n    }\n\n    getPos(pos) {\n        const [col, row] = pos;\n        return this.grid[col][row];\n    }\n    \n    setPos(pos, tile) {\n        const [col, row] = pos;\n        this.grid[col][row] = tile;\n    }\n\n    moveAll(direction) {\n        switch (direction) {\n            case \"left\":\n                this.moveLeft();\n                break;\n            case \"right\":\n                this.moveRight();\n                break;\n            case \"up\":\n                this.moveUp();\n                break;\n            case \"down\":\n                this.moveDown();\n                break;\n            default: \n                break;\n        }\n        this.createRandomTile();\n    }\n\n    moveUp() {\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = 1; i < this.grid.length; i++) {\n                if (this.grid[j][i].val) {\n                    let row = i;\n                    while (row > 0) {\n                        if (!this.grid[j][row - 1].val) {\n                            this.grid[j][row - 1] = this.grid[j][row]\n                            this.grid[j][row] = new Tile(null)\n                            row--;\n                        } else if (this.grid[j][row - 1].val == this.grid[j][row].val) {\n                            this.grid[j][row - 1] = new Tile(this.grid[j][row].val * 2);\n                            // score increment\n                            this.grid[j][row] = new Tile(null);\n                            break;\n                        } else break;\n                    }\n                }\n\n            }\n\n        }\n\n    }\n\n    moveDown() {\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = this.grid.length - 1; i >= 0; i--) {\n                if (this.grid[j][i].val) {\n                    let row = i;\n                    while (row < 3) {\n                        if (!this.grid[j][row + 1].val) {\n                            this.grid[j][row + 1] = this.grid[j][row];\n                            this.grid[j][row] = new Tile(null);\n                            row++;\n                        } else if (this.grid[j][row + 1].val == this.grid[j][row].val) {\n                            this.grid[j][row + 1] = new Tile(this.grid[j][row].val * 2);\n                            // score increment\n                            this.grid[j][row] = new Tile(null);\n                            break;\n                        } else break;\n                    }\n                }\n            }\n        }\n\n    }\n\n    moveRight() {\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = this.grid.length - 1; i >= 0; i--) {\n                if (this.grid[i][j].val) {\n                    let col = i;\n                    while (col < 3) {\n                        if (!this.grid[col + 1][j].val) {\n                            this.grid[col + 1][j] = this.grid[col][j]\n                            this.grid[col][j] = new Tile(null)\n                            col++;\n                        } else if (this.grid[col + 1][j].val == this.grid[col][j].val) {\n                            this.grid[col + 1][j] = new Tile(this.grid[col][j].val * 2);\n                            // score increment\n                            this.grid[col][j] = new Tile(null);\n                            break;\n                        } else break;\n                    }\n                }\n\n            }\n\n        }\n    }\n\n    moveLeft() {\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = 1; i < this.grid.length; i++) {\n                if (this.grid[i][j].val) {\n                    let col = i;\n                    while (col > 0) {\n                        if (!this.grid[col - 1][j].val) {\n                            this.grid[col - 1][j] = this.grid[col][j]\n                            this.grid[col][j] = new Tile(null)\n                            col--;\n                        } else if (this.grid[col - 1][j].val == this.grid[col][j].val) {\n                            this.grid[col - 1][j] = new Tile(this.grid[col][j].val * 2);\n                            // score increment\n                            this.grid[col][j] = new Tile(null);\n                            break;\n                        } else break;\n                    }\n                }\n                \n            }\n            \n        }\n    }\n}\n\nmodule.exports = Board;\n\n","const Board = require(\"./board\");\n\nclass Game{\n    constructor() {\n        this.board = new Board();\n    }\n\n    // // play(direction) {\n    // //     while (!this.gameOver) {\n    // //         debugger\n    // //         console.log(\"LET'S PLAY\");\n    // //         this.turn(direction);\n    // //         this.board.createRandomTile(this.grid)\n    // //         this.gameOverCheck();\n    // //     }\n    // //     endGame();\n    // // }\n\n    turn(direction) {\n        if (!this.board.gameOver) {\n            this.board.moveAll(direction)\n        } else {\n          console.log(\"GAME OVER\");\n        }\n    }\n}\nmodule.exports = Game;","const TILE_COLORS = {\n    null: \"yellow\",\n    2: \"red\",\n    4: \"orange\",\n    8: \"green\",\n    16: \"blue\",\n    32: \"indigo\",\n    64: \"purple\",\n    128: \"red\",\n    256: \"orange\",\n    512: \"green\",\n    1024: \"blue\",\n    2048: \"indigo\",\n    4096: \"purple\"\n};\n\nclass Tile {\n\n\n    constructor(val = null) {\n        this.val = val\n        this.color = TILE_COLORS[val];\n    }\n}\nmodule.exports = Tile;"],"sourceRoot":""}