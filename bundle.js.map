{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/app.js","webpack:///./app/board.js","webpack:///./app/game.js","webpack:///./app/tile.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,eAAe,4CAAI;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,gBAAgB;AACzC,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3HA,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,oDAAoD,iBAAiB,mBAAmB,iBAAiB,mBAAmB,iBAAiB,mBAAmB,iBAAiB;AACjL;AACA;AACA;;AAEA;AACA,yBAAyB,wBAAwB;AACjD,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;;AAEA;AACA,6CAA6C;AAC7C;AACA,0BAA0B,qBAAqB;AAC/C,8BAA8B,qBAAqB;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjD,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;AClSA,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sB;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;;;AAGA;AACA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/app.js\");\n","import Game from './game'\n\nconst CELL_W = 100;\nconst CELL_H = 100;\nconst CELL_ROWS = 4;\nconst CELL_COLS = 4;\nconst CELL_GAP = 2\n\nconst KEY_LEFT = 37;\nconst KEY_UP = 38;\nconst KEY_RIGHT = 39;\nconst KEY_DOWN = 40;\n\nlet canvas = document.getElementById('doubleTroubleCanvas');\nlet canvasContext = canvas.getContext('2d');\n\nlet sizeInput = document.getElementById(\"size\");\nlet changeSize = document.getElementById(\"change-size\");\nlet scoreboard = document.getElementById(\"scoreboard\");\n\nlet size = 4;\nlet width = canvas.width / size - 5;\n\nlet cells = [];\nlet fontSize;\nlet gameOver = false;\n\nlet game;\nlet board;\n\nstartGame();\n\nfunction startGame() {\n    // debugger;\n    game = new Game(colorRect);\n    board = game.board;\n    scoreboard.innerHTML = `Score: 0`;\n    drawAll();\n    canvas.style.opacity = \"1\";\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    document.addEventListener('keydown', keyPressed)\n})\n\nlet resetButton = document.getElementById(\"reset-button\");\nresetButton.addEventListener('click', () => {\n    startGame();\n})\n\n\n\n\nfunction keyPressed(evt) {\n    switch (evt.keyCode) {\n        case KEY_LEFT:\n            game.turn('left');\n            break;\n        case KEY_RIGHT:\n            game.turn('right');\n            break;\n        case KEY_UP:\n            game.turn('up');\n            break;\n        case KEY_DOWN:\n            game.turn('down');\n            break;\n        default:\n            break;\n    }\n    scoreboard.innerHTML = `Score: ${board.score}`\n    board.setAllMergable();\n    drawAll();\n    if (!board.hasValidMoves()) {\n        endGame();\n        return;\n    }\n    evt.preventDefault();\n}\n\nfunction drawCells() {\n    for (let eachRow = 0; eachRow < size; eachRow++) {\n        for (let eachCol = 0; eachCol < size; eachCol++) {\n            let tile = board.grid[eachRow][eachCol];\n            tile.drawTile(canvasContext, CELL_W * eachRow + CELL_GAP,\n                CELL_H * eachCol + CELL_GAP,\n                CELL_W - CELL_GAP,\n                CELL_H - CELL_GAP,\n            );\n        }\n    }    \n}\n\n\nfunction drawAll() {\n    drawCanvas();\n    drawCells();\n}\n\nfunction drawCanvas() {\n    colorRect(0, 0, canvas.width, canvas.height, 'black');\n}\n\nfunction colorRect(topLeftX, topLeftY, boxWidth, boxHeight, fillColor, val) {\n    // debugger;\n    canvasContext.fillStyle = fillColor;\n    canvasContext.fillRect(topLeftX, topLeftY, boxWidth, boxHeight);\n    let fontSize = 20;\n    canvasContext.font = `${fontSize}px serif`;\n    canvasContext.textAlign = \"center\";\n    canvasContext.fillStyle = \"black\";\n    if (val) {\n        canvasContext.fillText(`${val}`, topLeftX + 50, topLeftY + 50);\n    }\n}\n\nfunction endGame() {\n    canvas.style.opacity = \"0.5\"\n    board.gameOver = true;\n    canvasContext.font = `75px serif`;\n    canvasContext.textAlign = \"center\";\n    canvasContext.fillStyle = \"black\";\n    canvasContext.fillText(`YOU SUCK`, 200, 200);\n}\n\n","const Tile = require(\"./tile\");\n\nclass Board {\n    constructor(colorRect) {\n        this.colorRect = colorRect\n        this.grid = this.blankGrid();\n        this.gameOver = false;\n        this.createRandomTile(this.grid);\n        this.createRandomTile(this.grid);\n        this.score = 0;\n\n    }\n\n    blankGrid() {\n        let blankArr = new Array(4);\n        for (let i = 0; i < blankArr.length; i++) {\n            blankArr[i] = new Array(new Tile(null, { col: i, row: 0 }), new Tile(null, { col: i, row: 1 }), new Tile(null, { col: i, row: 2 }), new Tile(null, { col: i, row: 3 }));\n        }\n        return blankArr;\n    }\n\n    setAllMergable() {\n        for (let row = 0; row < this.grid.length; row++) {\n            for (let col = 0;  col < this.grid.length; col++) {\n                let tile = this.grid[col][row]\n                tile.makeMergable();\n                tile.row = row;\n                tile.col = col;\n            }\n        }\n        debugger;\n    }\n\n    getAllEmptyPos() {\n        let allEmptyPos = []\n        for (let j = 0; j < this.grid.length; j++) {\n            for (let i = 0; i < this.grid[j].length; i++) {\n                if (!this.grid[i][j].val) {\n                    allEmptyPos.push([i,j]);\n                }\n            }\n            \n        }\n        return allEmptyPos;\n    }\n\n    createRandomTile() {\n        let pos = this.generateRandomAvailablePos();\n        let val = Math.random() < .5 ? 2 : 4;\n        let newTile = new Tile(val, pos);\n        this.setPos(pos, newTile);\n    }\n\n    generateRandomAvailablePos() {\n        let allEmptyPos = this.getAllEmptyPos();\n        let randomIndex = Math.floor(Math.random() * allEmptyPos.length);\n        // debugger;\n        return allEmptyPos[randomIndex];\n    }\n\n    getPos(pos) {\n        const [col, row] = pos;\n        return this.grid[col][row];\n    }\n    \n    setPos(pos, tile) {\n        const [col, row] = pos;\n        this.grid[col][row] = tile;\n    }\n\n    deepDup(arr) {\n        return arr.map(el => {\n            if (el instanceof Array) {\n                return this.deepDup(el)\n            } else {\n                return el;\n            }\n         });\n    }\n    \n    // isValidMove(moveCommand) {\n    //     let prevGrid = deepDup(this.grid); //deep dup this.grid to store previous state\n    //     let newGrid = this.moveComand;\n    //     for (let i = 0; i < prevGrid.length; i++) {\n    //         for (let j = 0; j < prevGrid.length; j++) {\n    //             if prevGrid[]\n    //         }\n    //     }\n\n    //     return true;\n    // }\n\n    isValidMove(direction) {\n        //debugger;\n        let setScore = this.score\n        let toMutateState = this.deepDup(this.grid);\n        let prevState = this.deepDup(this.grid);\n        // debugger;\n        switch (direction) {\n            case \"left\":\n                this.moveLeft(toMutateState);\n                break;\n            case \"right\":\n                this.moveRight(toMutateState);\n                break;\n            case \"up\":\n                this.moveUp(toMutateState);\n                break;\n            case \"down\":\n                this.moveDown(toMutateState);\n                break;\n            default:\n                break;\n        }\n        for (let row = 0; row < prevState.length; row++) {\n            for (let col = 0; col < prevState.length; col++) {\n                if (prevState[col][row] !== toMutateState[col][row]) {\n                    // debugger;\n                    this.score = setScore;\n                    return true;\n                }\n            }\n        }\n        // debugger/// why does it sometimes debugger here?\n        this.score = setScore;\n        return false;\n\n    }\n\n    hasValidMoves() {\n        // debugger\n        return this.getAllEmptyPos().length > 0 || this.isValidMove(\"left\") || this.isValidMove(\"right\") || this.isValidMove(\"up\") || this.isValidMove(\"down\");\n        // return this.getAllEmptyPos().length !== 0// if there are no empty spaces and no touching same #'s\n\n    }\n\n    moveAll(direction) {\n        // debugger;\n        if (this.isValidMove(direction)) {\n            switch (direction) {\n                case \"left\":\n                    this.moveLeft(this.grid);\n                    break;\n                case \"right\":\n                    this.moveRight(this.grid);\n                    break;\n                case \"up\":\n                    this.moveUp(this.grid);\n                    break;\n                case \"down\":\n                    this.moveDown(this.grid);\n                    break;\n                default: \n                    break;\n            }\n            this.createRandomTile();\n        }\n    }\n    \n    moveUp(arr) {\n        let pos;\n        for (let col = 0; col < arr.length; col++) {\n            for (let row = 1; row < arr.length; row++) {\n                if (arr[col][row].val) {\n                    while (row > 0) {\n                        if (!arr[col][row - 1].val) {\n                            debugger;\n                            arr[col][row - 1] = arr[col][row]\n                            pos = { x: row - 1, y: col }\n                            arr[col][row] = new Tile(null, pos);\n                            // // arr[col][row - 1].drawTile(this.ctx, topLeftX, topLeftY, boxWidth, boxHeight, fillColor, val);\n                            // // arr[col][row].drawTile();\n                            // this.colorRect();\n                            //trigger redraw of canvas\n                            row--;\n                        } else if (arr[col][row - 1].val == arr[col][row].val &&\n                            arr[col][row - 1].mergable && arr[col][row].mergable) {\n                            let double = arr[col][row].val * 2;\n                            pos = { x: row - 1, y: col}\n                            arr[col][row - 1] = new Tile(double, pos);\n                            this.score += double;\n                            pos = { x: row, y: col }\n                            arr[col][row] = new Tile(null, pos);\n                            break;\n                        } else \n                            break;\n                    }\n                }\n\n            }\n\n        }\n\n        return arr;\n    }\n\n    moveDown(arr) {\n        let pos;\n        for (let col = 0; col < arr.length; col++) {\n            for (let row = arr.length - 1; row >= 0; row--) {\n                if (arr[col][row].val) {\n                    while (row < 3) {\n                        if (!arr[col][row + 1].val) {\n                            arr[col][row + 1] = arr[col][row];\n                            pos = { x: row + 1, y: col }\n                            arr[col][row] = new Tile(null, pos);\n                            //trigger redraw of canvas\n                            row++;\n                        } else if (arr[col][row + 1].val == arr[col][row].val &&\n                            arr[col][row + 1].mergable && arr[col][row].mergable) {\n                            let double = arr[col][row].val * 2;\n                            pos = { x: row + 1, y: col }\n                            arr[col][row + 1] = new Tile(double, pos);\n                            this.score += double;\n                            pos = { x: row, y: col };\n                            arr[col][row] = new Tile(null, pos);\n                            break;\n                        } else break;\n                    };\n                }\n            }\n        }\n        return arr;\n    }\n\n\n    moveRight(arr) {\n        let pos;\n        for (let row = 0; row < arr.length; row++) {\n            for (let col = arr.length - 1; col >= 0; col--) {\n                if (arr[col][row].val) {\n                    while (col < 3) {\n                        if (!arr[col + 1][row].val) {\n                            arr[col + 1][row] = arr[col][row];\n                            pos = { x: row, y: col };\n                            arr[col][row] = new Tile(null, pos)\n                            //trigger redraw of canvas\n                            col++;\n                        } else if (arr[col + 1][row].val == arr[col][row].val &&\n                            arr[col + 1][row].mergable && arr[col][row].mergable) {\n                            let double = arr[col][row].val * 2\n                            pos = { x: row, y: col + 1 };\n                            arr[col + 1][row] = new Tile(double, pos);\n                            this.score += double;\n                            pos = { x: row, y: col };\n                            arr[col][row] = new Tile(null, pos);\n                            break;\n                        } else break\n                    };\n                }\n            }\n\n        }\n        return arr;\n    }\n\n\n    moveLeft(arr) {\n        let pos;\n        for (let row = 0; row < arr.length; row++) {\n            for (let col = 1; col < arr.length; col++) {\n                if (arr[col][row].val) {\n                    while (col > 0) {\n                        if (!arr[col - 1][row].val) {\n                            arr[col - 1][row] = arr[col][row];\n                            pos = { x: row, y: col };\n                            arr[col][row] = new Tile(null, pos);\n                            //trigger redraw of canvas\n                            col--;\n                        } else if (arr[col - 1][row].val == arr[col][row].val && arr[col - 1][row].mergable && arr[col][row].mergable) {\n                            let double = arr[col][row].val * 2;\n                            pos = { x: row, y: col - 1 };\n                            arr[col - 1][row] = new Tile(double, pos);\n                            this.score += double;\n                            pos = { x: row, y: col };\n                            arr[col][row] = new Tile(null, pos);\n                            break;\n                        } else break;\n                    }\n                }\n            }\n                \n        }\n\n        return arr;\n            \n    }\n}\n\n\nmodule.exports = Board;\n\n","const Board = require(\"./board\");\n\nclass Game{\n    constructor(colorRect) {\n        this.board = new Board(colorRect);\n    }\n\n    turn(direction) {\n        if (!this.board.gameOver) {\n            this.board.moveAll(direction)\n        }\n    }\n}\nmodule.exports = Game;","const TILE_COLORS = {\n    null: \"yellow\",\n    2: \"#FFFFF0\",\n    4: \"red\",\n    8: \"orange\",\n    16: \"#6F00FF\",\n    32: \"#003CFF\",\n    64: \"#00EBFF\",\n    128: \"green\",\n    256: \"#00FF22\",\n    512: \"#7CFF00\",\n    1024: \"#F7FF00\",\n    2048: \"#FF7C00\",\n    4096: \"#FF2F00\",\n};\n\nclass Tile {\n\n    constructor(val = null, pos) {\n        this.val = val\n        this.color = TILE_COLORS[val];\n        this.col = pos.col;\n        this.row = pos.row;\n        this.mergable = false;\n    }\n\n    makeMergable() {\n        this.mergable = true;\n    }\n\n    drawTile(ctx, topLeftX, topLeftY, boxWidth, boxHeight) {\n            ctx.fillStyle = this.color;\n            ctx.fillRect(topLeftX, topLeftY, boxWidth, boxHeight);\n            let fontSize = 20;\n            ctx.font = `${fontSize}px serif`;\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = \"black\";\n            if (this.val) {\n                ctx.fillText(`${this.val}`, topLeftX + 50, topLeftY + 50);\n            }\n    }\n\n\n}\nmodule.exports = Tile;"],"sourceRoot":""}