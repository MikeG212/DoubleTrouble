{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/app.js","webpack:///./app/board.js","webpack:///./app/game.js","webpack:///./app/tile.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAyB;;AAEzB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,eAAe,4CAAI;AACnB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,qBAAqB;AAC9C,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;;;;;;;;;;;;;ACxFA,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;AChJA,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,sB;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/app.js\");\n","import Game from './game'\n\nconst CELL_W = 100;\nconst CELL_H = 100;\nconst CELL_ROWS = 4;\nconst CELL_COLS = 4;\nconst CELL_GAP = 2\n\n\nconst KEY_LEFT = 37;\nconst KEY_UP = 38;\nconst KEY_RIGHT = 39;\nconst KEY_DOWN = 40;\n\nlet game = new Game();\nlet board = game.board;\n\nlet grid = board.grid;\n\nlet canvas, canvasContext;\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM CONTENT LOADED');\n    canvas = document.getElementById('doubleTroubleCanvas');\n    canvasContext = canvas.getContext('2d');\n    drawAll();\n    document.addEventListener('keydown', keyPressed)\n})\n\nfunction keyPressed(evt) {\n    console.log(evt.keyCode);\n    switch(evt.keyCode) {\n        case KEY_LEFT:\n            game.turn('left');\n            drawAll();\n            break;\n        case KEY_RIGHT:\n            game.turn('right');\n            drawAll();\n            break;\n        case KEY_UP:\n            game.turn('up');\n            drawAll();\n            break;\n        case KEY_DOWN:\n            game.turn('down');\n            drawAll();\n            break;\n        default:\n            break;\n    }\n    evt.preventDefault();\n}\n\nfunction drawCells() {\n    for (let eachRow = 0; eachRow < CELL_ROWS; eachRow++) {\n        for (let eachCol = 0; eachCol < CELL_COLS; eachCol++) {\n            let tile = grid[eachRow][eachCol];\n            colorRect(CELL_W * eachRow + CELL_GAP,\n                      CELL_H * eachCol + CELL_GAP,\n                      CELL_W - CELL_GAP,\n                      CELL_H - CELL_GAP,\n                      tile.color,\n                      tile.val\n                    );\n        }\n    }    \n}\n\n\nfunction drawAll() {\n    drawCanvas();\n    drawCells();\n}\n\nfunction drawCanvas() {\n    colorRect(0, 0, canvas.width, canvas.height, 'black');\n}\n\nfunction colorRect(topLeftX, topLeftY, boxWidth, boxHeight, fillColor, val) {\n    \n    canvasContext.fillStyle = fillColor;\n    canvasContext.fillRect(topLeftX, topLeftY, boxWidth, boxHeight);\n    canvasContext.font = '40px serif';\n    canvasContext.fillStyle = \"black\";\n    if (val) {\n        canvasContext.fillText(`${val}`, topLeftX + 40, topLeftY + 60);\n    }\n}\n\n","const Tile = require(\"./tile\");\n\nclass Board {\n    constructor() {\n        this.grid = this.blankGrid();\n        this.createRandomTile(this.grid);\n        this.createRandomTile(this.grid);\n    }\n\n    blankGrid() {\n        let blankArr = new Array(4);\n        for (let index = 0; index < blankArr.length; index++) {\n            blankArr[index] = new Array(new Tile(null), new Tile(null), new Tile(null), new Tile(null));\n        }\n        return blankArr;\n    }\n\n    createRandomTile(grid) {\n        let val;\n        if (Math.random() < .5) {\n            val = 2;\n        } else {\n            val = 4;\n        }\n        let pos = this.generateRandomPos();\n        while (this.getPos(grid, pos).val)  {\n            pos = this.generateRandomPos();\n        }\n        let newTile = new Tile(val);\n        this.setPos(grid, pos, newTile);\n    }\n\n    generateRandomPos() {\n        return [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n    }\n\n    getPos(grid, pos) {\n        const [col, row] = pos;\n        return grid[col][row];\n    }\n    \n    setPos(grid, pos, tile) {\n        const [col, row] = pos;\n        grid[col][row] = tile;\n    }\n\n    moveAll(direction) {\n        switch (direction) {\n            case \"left\":\n                this.shiftTilesLeft;\n                this.combineTilesLeft;\n                this.shiftTilesLeft;\n                break;\n            case \"right\":\n                this.shiftTilesRight;\n                this.combineTilesRight;\n                this.shiftTilesRight;\n                break;\n            case \"up\":\n                this.shiftTilesUp;\n                this.combineTilesUp;\n                this.shiftTilesUp;\n                break;\n            case \"down\":\n                this.shiftTilesDown;\n                this.combineTilesDown;\n                this.shiftTilesDown;\n                break;\n            default: \n                break;\n\n        }\n\n    }\n\n    moveUp() {\n        let col;\n        for (let i = 0; i < this.grid.length; i++) {\n            let filteredCol = [];\n            col = this.grid[i]\n            for (let j = 0; j < col.length; j++) {\n                let el = col[j];\n                if (col[j].val) {\n                    filteredCol.push(el);\n                }\n\n            }\n            while (filteredCol.length < 4) {\n                filteredCol.push(new Tile(null));\n            }\n            this.grid[i] = filteredCol;\n        }\n        console.log(this.grid);\n    }\n\n\n\n    moveDown() {\n        let col;\n        let filteredCol;\n        for (let i = 0; i < this.grid.length; i++) {\n            col = this.grid[i]\n            filteredCol = filterNullsFromCol(col);\n            while (filteredCol.length < 4) {\n                filteredCol.push(new Tile(null));\n            }\n            this.grid[i] = filteredCol;\n        }\n        console.log(this.grid);\n    }\n\n    moveLeft() {\n\n    }\n\n    moveRight() {\n\n    }\n\n    combineTilesUp() {\n        for (let i = col.length - 1; i > 1; i--) {\n            el = col[i];\n            nextEl = col[i - 1];\n            if (el === nextEl) {\n                col[i] = new Tile(null)\n                col[i - 1] = new Tile(el * 2);\n                i--;\n            }\n        }\n    }\n\n    combineTilesDown() {\n\n    }\n\n    combineTilesLeft() {\n\n    }\n\n    combineTilesRight() {\n\n    }\n}\n\nmodule.exports = Board;\n\n","const Board = require(\"./board\");\n\nclass Game{\n    constructor() {\n        this.board = new Board();\n        this.gameOver = false;\n        this.grid = this.board.grid;\n\n    }\n\n    gameOverCheck() {\n        //does the player have moves that mutate the grid\n    }\n\n    play() {\n        while (!this.gameOver) {\n            this.turn();\n            this.board.createRandomTile(this.grid)\n            this.gameOverCheck();\n        }\n        endGame();\n    }\n\n    turn(direction) {\n        this.board.moveAll(direction)\n        this.board.createRandomTile(this.grid);\n    }\n\n    endGame() {\n        console.log(\"GAME OVER!!!\");\n    }\n\n\n    hasValidmoves(){\n        //can I mutate the grid?\n    }\n\n}\nmodule.exports = Game;","const TILE_COLORS = {\n    null: 'yellow',\n    2: 'red',\n    4: 'green'\n}\n\nclass Tile {\n\n\n    constructor(val = null) {\n        this.val = val\n        this.color = TILE_COLORS[val];\n    }\n}\nmodule.exports = Tile;"],"sourceRoot":""}